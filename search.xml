<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="1面向对象"><a href="#1面向对象" class="headerlink" title="1面向对象"></a>1面向对象</h3><ul>
<li>为了让程序的功能更加清晰而进行模块化的划分，并且模块是独立运行的，简单来说是结构化编程</li>
</ul>
<h4 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h4><ul>
<li>包含数据成员和函数成员，与结构体类似</li>
<li>结构体与类的区别：结构体的性能很好，因为结构体是值类型而类是引用类型的</li>
</ul>
<p>习惯上每一个类创建一个单独的项目来存储，一个文件里可以包含多个类</p>
<p>类名与文件名需要保持相同</p>
<ul>
<li>internal class和class的区别：internal class只在当前程序集内作用即当前项目下的所有cs文件</li>
</ul>
<h4 id="1-2类的实例化"><a href="#1-2类的实例化" class="headerlink" title="1.2类的实例化"></a>1.2类的实例化</h4><ul>
<li>声明变量</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Customer c1;</span><br></pre></td></tr></table></figure>

<ul>
<li>实例化一个对象</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">c1 = <span class="keyword">new</span> Customer();</span><br></pre></td></tr></table></figure>

<p>连起来就是</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Customer c1 = <span class="keyword">new</span> Customer();</span><br></pre></td></tr></table></figure>

<p>在对于引用类型进行初始化的的过程（设置初始值）中会调用对象的构造函数，如果对象没有定义构造函数，系统会提供一个默认的无参数构造函数用于初始化</p>
<h4 id="1-3权限管理"><a href="#1-3权限管理" class="headerlink" title="1.3权限管理"></a>1.3权限管理</h4><p><code>public</code>和<code>private</code>可以设置数据的权限，当设置数据为<code>private</code>时数据只能在当前的<code>class</code>被赋值，如果需要外部访问private的数据需要定义<code>set</code>和<code>get</code>方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Vector3</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> x;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetX</span>(<span class="params"><span class="built_in">float</span> temp</span>)</span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span>(temp &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = temp; </span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">GetX</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">		Vector3 v2 = <span class="keyword">new</span> Vector3();</span><br><span class="line">        v2.SetX(<span class="number">5.5f</span>);</span><br><span class="line">		Console.WriteLine(v2.GetX());</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>因为外部无法直接赋值private的成员，所以需要定义Set方法来对private的变量进行赋值</p>
<p>其中的<code>GetX</code>函数在<code>Vector3</code>这个<code>class</code>中，能够访问<code>class</code>内部的<code>private</code>成员x，通过这种方法在外部得到x的值</p>
<ul>
<li>Set和Get都类似外部与内部之间的桥梁，保证数据的安全性</li>
</ul>
<h4 id="1-4构造函数"><a href="#1-4构造函数" class="headerlink" title="1.4构造函数"></a>1.4构造函数</h4><p>通过new来构建对象时，对象里所有数据都会进行默认的赋值，值类型的默认值是0，引用类型默认值是null</p>
<p>如果想要初始化时按照指定的内容进行赋值则需要使用<code>构造函数</code></p>
<ul>
<li>构造函数的名称与类名保持一致</li>
<li>构造函数是一个函数</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Myclass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Myclass</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> address;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Customer</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> address, <span class="built_in">int</span> age, <span class="built_in">string</span> createTime</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;<span class="comment">//this指向了这个类中的数据成员 等号后的name为函数的传参</span></span><br><span class="line">            <span class="keyword">this</span>.address = address;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-5属性"><a href="#1-5属性" class="headerlink" title="1.5属性"></a>1.5属性</h4><ul>
<li>属性的引入简化了对于类中private的值每次都需要定义Set函数和Get函数，属性本身可以理解为一个数据成员，一般与想要设置的值同名，在里面设置get和set方法</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Customer脚本</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age<span class="comment">//int表示set传入参数的类型与get返回值类型</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span><span class="comment">//给Age赋值会调用set 传入value参数</span></span><br><span class="line">            &#123;</span><br><span class="line">                age = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//main 函数</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Customer lisi = <span class="keyword">new</span> Customer();</span><br><span class="line">            lisi.Age = <span class="number">10</span>;<span class="comment">//赋值调用set</span></span><br><span class="line">            Console.WriteLine(lisi.Age);<span class="comment">//取得值时调用get</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性中可以写其他东西，必须判断条件</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span><span class="comment">//给Age赋值会调用set 传入value参数</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                age = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性中可以只有set或者get表示只写和只读</li>
<li>属性可以简写,会默认找到属性小写的那个数据成员</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;<span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-6匿名类型"><a href="#1-6匿名类型" class="headerlink" title="1.6匿名类型"></a>1.6匿名类型</h4><p>系统自动通过赋值来判断类型，初始化结束后类型将固定</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age =<span class="number">12</span></span><br></pre></td></tr></table></figure>

<h3 id="2内存"><a href="#2内存" class="headerlink" title="2内存"></a>2内存</h3><h4 id="2-1堆栈"><a href="#2-1堆栈" class="headerlink" title="2.1堆栈"></a>2.1堆栈</h4><p>程序所有的数据都存储在内存中，内存主要分为<strong>堆</strong>，<strong>栈</strong>和<strong>静态存储区</strong></p>
<p><strong>栈</strong>的空间较小，读取速度较快</p>
<p><strong>堆</strong>空间较大，读取速度较慢</p>
<p><strong>静态存储区</strong>用于存放字符串</p>
<h5 id="2-1-1垃圾回收Garbage-Collector"><a href="#2-1-1垃圾回收Garbage-Collector" class="headerlink" title="2.1.1垃圾回收Garbage Collector"></a>2.1.1垃圾回收Garbage Collector</h5><p>系统通过检测分配的内存区域还是否有使用来回收内存空间</p>
<p>当声明一个变量后系统会分配一块内存，并且&#x3D;&#x3D;标记这块内存已经被占用&#x3D;&#x3D;，当有新的数据加入内存不会占用原有内存</p>
<p>垃圾回收通过取消标记使得新的数据覆盖原有数据的内存区域</p>
<h4 id="2-2值类型和引用类型"><a href="#2-2值类型和引用类型" class="headerlink" title="2.2值类型和引用类型"></a>2.2值类型和引用类型</h4><p>数据类型分为两种：</p>
<p>​	值类型：整数，bool，char，浮点类型,结构体，枚举</p>
<p>​	引用类型：class，数组，string</p>
<p>值类型数据较为简单，只需要一段单独的内存，一般存储在栈中，读取速度较快</p>
<p>引用类型需要两端内存，第一段在堆中存储实际的数据，第二段是引用，将地址存储在栈中，指向数据在堆中的存放位置</p>
<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230808115729543.png" alt="image-20230808115729543"></p>
<h4 id="2-3字符串的存放"><a href="#2-3字符串的存放" class="headerlink" title="2.3字符串的存放"></a>2.3字符串的存放</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> a1 = <span class="string">&quot;张山&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> a2 = <span class="string">&quot;张山&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>string为引用类型，字符串存储在静态存储区中，而在静态存储区中两个张山是一致的，占用同一块内存，所以栈中的地址都指向静态存储区的同一片区域。</p>
<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230808121512877.png" alt="image-20230808121512877"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Customer c1 = <span class="keyword">new</span> Customer(<span class="string">&quot;exile&quot;</span>,<span class="string">&quot;hone&quot;</span>,<span class="number">13</span>,<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">Customer c2 = <span class="keyword">new</span> Customer(<span class="string">&quot;exile&quot;</span>, <span class="string">&quot;hone&quot;</span>, <span class="number">13</span>, <span class="string">&quot;2021&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>对于这个类的初始化，”exile”，”hone”，”2021”都存储在静态存储区中占用同一块内存，而对于两个不同的对象的<code>int</code> 13在堆中占用两块不同的内存</p>
<h4 id="2-4对象引用的改变"><a href="#2-4对象引用的改变" class="headerlink" title="2.4对象引用的改变"></a>2.4对象引用的改变</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Customer c1 = <span class="keyword">new</span> Customer(<span class="string">&quot;exile&quot;</span>,<span class="string">&quot;hone&quot;</span>,<span class="number">13</span>,<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">Customer c2 = <span class="keyword">new</span> Customer(<span class="string">&quot;exile&quot;</span>, <span class="string">&quot;hone&quot;</span>, <span class="number">13</span>, <span class="string">&quot;2021&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在内存中的示意图如下：</p>
<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230808123804473.png" alt="image-20230808123804473"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Customer c3 = <span class="keyword">new</span> Customer(<span class="string">&quot;exile&quot;</span>, <span class="string">&quot;hone&quot;</span>, <span class="number">13</span>, <span class="string">&quot;2021&quot;</span>);</span><br><span class="line">Customer c4 = c3;</span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230808123931438.png" alt="image-20230808123931438"></p>
<p>只有new实例化对象才会在堆中开辟一段新区域，而只是赋值的话相当于指向同一个引用区域</p>
<h4 id="2-5继承"><a href="#2-5继承" class="headerlink" title="2.5继承"></a>2.5继承</h4><p>把公共的部分提取为一个父类，如做一个enemy的战斗系统继承给boss和小怪</p>
<p>实现继承：表示一个类派生于一个基类（父类），会拥有基类所有的成员与函数，也可以重写函数</p>
<p>当没有指定继承类的时候，所有类默认继承Object类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">int</span> hp;</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">float</span> speed;     </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Boss</span>:<span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> attack;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Boss</span>(<span class="params"><span class="built_in">int</span> attack,<span class="built_in">int</span> hp,<span class="built_in">float</span> speed</span>)<span class="comment">//构造函数</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.attack = attack;</span><br><span class="line">            <span class="keyword">this</span>.hp = hp;<span class="comment">//这里this可以访问父类的hp</span></span><br><span class="line">            <span class="keyword">this</span>.speed = speed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;HP:&quot;</span> + hp);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;speed:&quot;</span> + speed);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;attack&quot;</span> + attack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Main function</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            Boss boss1 = <span class="keyword">new</span> Boss(<span class="number">150</span>,<span class="number">200</span>,<span class="number">50f</span>);</span><br><span class="line">            boss1.Print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>protected</code>介于<code>private</code>和<code>public</code>之间，可以使得子类访问父类的数据</p>
<h5 id="2-5-1-this和base"><a href="#2-5-1-this和base" class="headerlink" title="2.5.1 this和base"></a>2.5.1 this和base</h5><p>对于以上例子，可以用<code>this.hp</code>也可以用<code>base.hp</code>来访问父类</p>
<p><code>base</code>只能访问父类的成员，对于当前的attack不能访问</p>
<p><code>this</code>和<code>base</code>可以用来区分子类和父类的成员</p>
<h5 id="2-5-2用父类创建子类"><a href="#2-5-2用父类创建子类" class="headerlink" title="2.5.2用父类创建子类"></a>2.5.2用父类创建子类</h5><p>当使用父类类型来引用子类实例时，可以将不同类型的子类对象赋值给同一个父类类型的变量。这使得可以在不修改代码的情况下，轻松地切换不同的子类对象</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Enemy zombie = <span class="keyword">new</span> Zombie();</span><br></pre></td></tr></table></figure>

<h4 id="2-6重构父类"><a href="#2-6重构父类" class="headerlink" title="2.6重构父类"></a>2.6重构父类</h4><h5 id="2-6-1虚方法"><a href="#2-6-1虚方法" class="headerlink" title="2.6.1虚方法"></a>2.6.1虚方法</h5><p>可以在子类中重写父类所声明的方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Enemymove&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Boss</span>:<span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;bossMove&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-6-2隐藏方法"><a href="#2-6-2隐藏方法" class="headerlink" title="2.6.2隐藏方法"></a>2.6.2隐藏方法</h5><p>使用一个new关键词隐藏父类的方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;enemyAI&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Boss</span>:<span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">void</span> <span class="title">AI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;bossAI&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>虚方法和隐藏方法区别：使用父类创建对象时虚方法返回的依然是改写后override的方法，而隐藏方法返回的是原先父类定义的方法</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;父类虚方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;父类隐藏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Boss</span>:<span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;子类虚方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">void</span> <span class="title">AI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;子类隐藏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//main函数</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Enemy enemy;</span><br><span class="line">            enemy = <span class="keyword">new</span> Boss();<span class="comment">//父类创建子类</span></span><br><span class="line">            enemy.AI();<span class="comment">//隐藏方法返回的是父类</span></span><br><span class="line">            enemy.Move();<span class="comment">//虚方法返回的是子类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230809140821999.png" alt="image-20230809140821999"></p>
<h3 id="3抽象，静态与接口"><a href="#3抽象，静态与接口" class="headerlink" title="3抽象，静态与接口"></a>3抽象，静态与接口</h3><h4 id="3-1抽象类"><a href="#3-1抽象类" class="headerlink" title="3.1抽象类"></a>3.1抽象类</h4><p>c#可以将类和函数声明为abstract。抽象类<em>不能实例化</em>，抽象函数是只有函数定义没有函数体（可以理解为必须重写函数，否则编译器报错）</p>
<p>抽象函数（方法）只能存在在抽象类中</p>
<ul>
<li>抽象类中可以包含实例</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">internal</span>  <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> hp;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> speed;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Boss</span> : <span class="title">Enemy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;attack&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2密封类"><a href="#3-2密封类" class="headerlink" title="3.2密封类"></a>3.2密封类</h4><p>关键词<code>sealed</code>，密封类代表该类不能被继承，密封方法表示此方法不能够重写<code>override</code></p>
<p>密封方法是需要派生类重写一次后，防止其再次重写</p>
<h4 id="3-3-static"><a href="#3-3-static" class="headerlink" title="3.3 static"></a>3.3 static</h4><p><code>static</code>静态成员只能通过<strong>类名</strong>来访问，是一个类的共有变量，存放在静态存储区中</p>
<p>静态函数只能访问静态成员</p>
<p>静态类中只能包含静态对象</p>
<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230809190025444.png" alt="image-20230809190025444"></p>
<h4 id="3-4接口"><a href="#3-4接口" class="headerlink" title="3.4接口"></a>3.4接口</h4><p>&#x3D;&#x3D;接口定义了一套标准&#x3D;&#x3D;，接口里只包含了方法的定义，没有内容。接口里不能有构造函数</p>
<p>定义接口语法和定义抽象类相同，但不允许成员有实现方式</p>
<ul>
<li>接口中不能包含实例</li>
</ul>
<p><strong>定义接口</strong>(一般接口名字首字母为大写I）：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlyHandler</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现接口</strong>（实现方式类似于继承）：</p>
<p>接口的实现类中可以包含实例和别的方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypeEnemy</span>:<span class="title">IFlyHandler</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IFly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">FlyAttack</span>()</span>;       </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//接口的实现</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Plane</span> : <span class="title">IFly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FlyAttack</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;飞机攻击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IFly fly;</span><br><span class="line">            fly = <span class="keyword">new</span> Plane();</span><br><span class="line">            fly.FlyAttack();</span><br><span class="line">            fly.Fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="补充第一季"><a href="#补充第一季" class="headerlink" title="#补充第一季"></a>#补充第一季</h3><ul>
<li>枚举类型</li>
</ul>
<p>是一种类型，平行于int，char，float。可以用于定义职业系统</p>
<p>枚举列表中的每个元素代表一个整数值，一般来说第一个元素的值为0（用整数值方便计算机进行比较）</p>
<p>一般枚举类型名称首字母大写</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">enum</span> RoleType<span class="comment">//定义一个枚举类型</span></span><br><span class="line">        &#123;</span><br><span class="line">            Mage,Archer,Assassin,Tank,Support,Warrior<span class="comment">//枚举类型的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            RoleType roleType = RoleType.Mage;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>当需要访问成员的时候也是大写的<code>RoleType.Mage;</code></p>
<ul>
<li>数组赋值方式</li>
</ul>
<p>1.直接赋值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] ages = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">            Console.WriteLine(ages[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2.先声明后赋值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] ages;</span><br></pre></td></tr></table></figure>

<p>声明一个数组不会在内存中初始化数组</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">ages = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];<span class="comment">//默认值进行赋值</span></span><br></pre></td></tr></table></figure>

<p>数组是一个引用类型，所以您需要使用 <strong>new</strong> 关键字来创建数组的实例</p>
<p>3.先声明后赋具体值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] ages;</span><br><span class="line">ages = <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="4-泛型与泛型数据类型"><a href="#4-泛型与泛型数据类型" class="headerlink" title="4 泛型与泛型数据类型"></a>4 泛型与泛型数据类型</h3><h4 id="4-1泛型"><a href="#4-1泛型" class="headerlink" title="4.1泛型"></a>4.1泛型</h4><h4 id="4-2泛型数据类型List"><a href="#4-2泛型数据类型List" class="headerlink" title="4.2泛型数据类型List"></a>4.2泛型数据类型List</h4><p>List本质是一个C#封装好的类，本质是一个可变类型的泛型数组</p>
<p>List类提供了许多方法，如泛型数组的增删查改</p>
<ul>
<li>List的创建</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> List&lt;T&gt;();<span class="comment">//T是类型</span></span><br></pre></td></tr></table></figure>

<ul>
<li>增</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在表最后插入一个元素</span></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; list= <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">list.Add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定位置插入元素</span></span><br><span class="line">list.Insert(<span class="number">0</span>,<span class="number">999</span>);</span><br><span class="line">Console.WriteLine(list[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<ul>
<li>删</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">list.Remove(<span class="number">1</span>);<span class="comment">//在表中遍历同名元素然后删去</span></span><br><span class="line">list.RemoveAt(<span class="number">0</span>);<span class="comment">//删除表中第一个元素</span></span><br><span class="line">list.Clear();<span class="comment">//清空表</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询元素是否存在</span></span><br><span class="line"><span class="keyword">if</span>(list.Contains(<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Console.Writeline(<span class="string">&quot;exist&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正向查找元素位置,返回第一个匹配项的序号，找不到返回-1</span></span><br><span class="line"><span class="built_in">int</span> index = list.IndexOf(<span class="number">1</span>);</span><br><span class="line">Console.Writeline(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反向查找元素位置，返回最后一个匹配项的序号，找不到返回-1</span></span><br><span class="line"><span class="built_in">int</span> index = list.LastIndexOf(<span class="number">1</span>);</span><br><span class="line">Console.Writeline(index);</span><br></pre></td></tr></table></figure>

<ul>
<li>改：直接赋值</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">list[<span class="number">0</span>]=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>遍历</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//长度</span></span><br><span class="line">Console.Writeline(list.Count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//容量（实际占用大小）</span></span><br><span class="line">Console.Writeline(list.Capacity);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt; list.Count;i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(list[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5委托与事件"><a href="#5委托与事件" class="headerlink" title="5委托与事件"></a>5委托与事件</h3><h4 id="5-1委托"><a href="#5-1委托" class="headerlink" title="5.1委托"></a>5.1委托</h4><p>委托的本质：是表示函数的变量类型，<em>是函数的容器</em>，为一种引用类型，所以需要new来初始化</p>
<p>委托的语法：<code>public/private delegate  返回值类型  委托名字(参数列表)</code>类似在函数的声明前加了一个delegate，默认委托为public。一般写在namespace中，与class同级（这也是为什么要public）</p>
<ul>
<li>存入的函数返回值与传入参数必须与委托相同</li>
</ul>
<p>（1）作为类的成员</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _03<span class="title">Delegate</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyFun</span>()</span>;<span class="comment">//定义一个委托，默认为public</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">			<span class="comment">//第一种方法</span></span><br><span class="line">            MyFun f1 =<span class="keyword">new</span> MyFun(Fun);<span class="comment">//声明一个委托并初始化，需要传入一个函数参数</span></span><br><span class="line">            f1.Invoke();<span class="comment">//使用Invoke方法来使用这个委托</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//第二种方法</span></span><br><span class="line">             MyFun f2 = Fun;<span class="comment">//直接讲函数赋值，不加括号，加括号相当于调用</span></span><br><span class="line">             f2();<span class="comment">//调用</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Fun</span>()<span class="comment">//定义一个函数</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;asdw&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _03<span class="title">Delegate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">Delegate1</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Delegate1 d1 = Fun2;</span><br><span class="line">            Console.WriteLine(d1.Invoke(<span class="number">1</span>));</span><br><span class="line">            d1(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Fun2</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）作为函数的参数，可以在函数中调用,用于先去处理一些逻辑再执行函数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _03<span class="title">Delegate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Myfun</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Myfun fun;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFun</span>(<span class="params">Myfun fun</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">            i += <span class="number">2</span>;</span><br><span class="line">            fun();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）委托也可以存储多个函数（多播委托）</p>
<p>最终执行函数的时候按先进先出FIFO执行</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _03_1<span class="title">Delegate1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyFun123</span>()</span>;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyFun123 c1 = Print;</span><br><span class="line">            c1 += Print;<span class="comment">//此时c1里存储了两个Print函数</span></span><br><span class="line">            c1();</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;执行Print函数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-1-1委托的增减"><a href="#5-1-1委托的增减" class="headerlink" title="5.1.1委托的增减"></a>5.1.1委托的增减</h5><ul>
<li>委托执行前最好判断是否为空</li>
<li>可以用null来清空委托</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _03_1<span class="title">Delegate1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyFun</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyFun2</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> MyFun fun;<span class="comment">//作为类的成员变量</span></span><br><span class="line">        <span class="keyword">public</span> MyFun2 fun2;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddFun</span>(<span class="params">MyFun fun,MyFun2 fun2</span>)<span class="comment">//增加</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.fun += fun;</span><br><span class="line">            <span class="keyword">this</span>.fun2 += fun2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveFun</span>(<span class="params">MyFun fun,MyFun2 fun2</span>) <span class="comment">//减少</span></span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">this</span>.fun -= fun;</span><br><span class="line">            <span class="keyword">this</span>.fun2 -= fun2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Print&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">           Test test= <span class="keyword">new</span> Test();</span><br><span class="line">            test.AddFun(test.Print, test.Attack);</span><br><span class="line">            <span class="keyword">if</span> (test.fun != <span class="literal">null</span>)<span class="comment">//执行前最好判断委托变量是否为空</span></span><br><span class="line">            &#123; </span><br><span class="line">                test.fun(); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (test.fun2 != <span class="literal">null</span>)</span><br><span class="line">            &#123; </span><br><span class="line">                test.fun2(); </span><br><span class="line">            &#125;</span><br><span class="line">            test.fun=<span class="literal">null</span>;<span class="comment">//清空委托</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2Action委托"><a href="#5-2Action委托" class="headerlink" title="5.2Action委托"></a>5.2Action委托</h4><p>Action是一个无参无返回值委托，相当于在与class同级的命名空间中写了<code>public delegate void Action（）</code></p>
<ul>
<li>使用系统自带委托 需要引用命名空间 <code>using System;</code></li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _04<span class="title">Action</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Action action = Fun;</span><br><span class="line">            action();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Fun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Fun&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3Event事件"><a href="#5-3Event事件" class="headerlink" title="5.3Event事件"></a>5.3Event事件</h4><p>事件是一种特殊的变量类型，让委托的使用更具安全性</p>
<p>事件的好处：1.事件不能在外部使用赋值&#x3D;符号，只能+&#x3D; 和-&#x3D;</p>
<p>2.事件不能在外部执行</p>
<p>3.事件不能作为临时变量</p>
<p>事件语法：<code>访问修饰符 event 委托类型 事件名</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Action myFun;<span class="comment">//委托成员变量 存储函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> Action myEvent;<span class="comment">//事件成员变量 存储函数</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFun</span>()<span class="comment">//函数</span></span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Test</span>()<span class="comment">//构造函数</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            myFun = TestFun;</span><br><span class="line">            </span><br><span class="line">            myEvent = TestFun;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>事件不能在类外部赋值和调用，但是可以 加减来添加移除</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Action myFun;<span class="comment">//委托成员变量 存储函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> Action myEvent;<span class="comment">//事件成员变量 存储函数</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            myFun = TestFun;</span><br><span class="line">            myFun += TestFun;</span><br><span class="line">            myEvent = TestFun;</span><br><span class="line">            myEvent += TestFun;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            Test test = <span class="keyword">new</span> Test();</span><br><span class="line">            test.myFun = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//test.myEvent = null; 会报错 不能再外部被赋值</span></span><br><span class="line">            test.myEvent += Print;<span class="comment">//可以添加</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment">//调用</span></span><br><span class="line">            test.myFun();</span><br><span class="line">            <span class="comment">//test.myEvent(); 报错</span></span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果想要在外部调用事件需要在类里再封装一个方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Action myFun;<span class="comment">//委托成员变量 存储函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> Action myEvent;<span class="comment">//事件成员变量 存储函数</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            myFun = TestFun;</span><br><span class="line">            myFun += TestFun;</span><br><span class="line">            myEvent = TestFun;</span><br><span class="line">            myEvent += TestFun;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoEvent</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(myEvent != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                myEvent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-4EventHandler"><a href="#5-4EventHandler" class="headerlink" title="5.4EventHandler"></a>5.4EventHandler</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> _06<span class="title">EventHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventPublisher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler MyEvent;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Triggerevent</span>()<span class="comment">//事件不能在外部被调用，所以要在发布者里写一个能够调用事件的函数</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(MyEvent != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MyEvent(<span class="keyword">this</span>, EventArgs.Empty);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventSubscriber</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fun</span>(<span class="params"><span class="built_in">object</span> sender,EventArgs e</span>)<span class="comment">//事件订阅者的函数</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            EventPublisher publisher = <span class="keyword">new</span> EventPublisher();</span><br><span class="line">            EventSubscriber subscriber = <span class="keyword">new</span> EventSubscriber();</span><br><span class="line">            publisher.MyEvent += subscriber.Fun;</span><br><span class="line">            publisher.Triggerevent();<span class="comment">//触发事件</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-5Lamda表达式"><a href="#5-5Lamda表达式" class="headerlink" title="5.5Lamda表达式"></a>5.5Lamda表达式</h4>]]></content>
  </entry>
</search>
